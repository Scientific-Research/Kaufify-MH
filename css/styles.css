/* Universal RESET */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* defining global variables to use them anywhere in our program - using root Pseudo class selector which matches the html element!*/
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-border: #ccc;
  --border-radius: 3rem;
}

/* Typography */
html {
  /* font-size: 16px; */
  /*by default is 16px => this is set by the browser*/

  /* 62.5% of 16px is 10px */
  font-size: 62.5%; /*one rem is 10px!*/
}

/* after adding the google font to our html: I put the font-family here and all the elements will automatically inherited from that!*/
body {
  /* all are sans-serif fonts */
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5; /*1.5 times the current size*/
  color: var(--color-body);
  /* padding: 4rem; */
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

h1 {
  /*1 x font-size of html element*/
  font-size: 7rem; /*10px*/
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

/* p {
  margin-top: 0;
} */

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */
a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 0.5rem;

  /* we have to put the transition here => the parent of .link-arrow:hover::after */
  transition: transform 0.5s;

  /* We have to put the relative position here as parent! */
  position: relative;
}

/* .link-arrow:hover { */
.link-arrow:hover::after {
  /* My Solution using the transform and absolute and relative positions! */
  transform: translateX(1rem);

  /* to use the transform, we have to use the child here as absolute position and the parent as relative position above! */
  position: absolute;
  top: 0.43rem;
  /* bottom: 0; */
  /* left: 0; */

  /* Mosh Solution => very simple*/
  /* margin-left: 1rem; */
}

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
.badge {
  /* border-radius: 20px; */
  /* it doesn't wrap itself to the second line - whatever we put in this line,it will not wrap and would be always in one line!*/
  border-radius: 2rem;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem; /*0.5rem for vertical padding and 2rem for horizontal padding!*/
  white-space: nowrap;
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is badge from MODIFIER which is primary! */
.badge--primary {
  background: var(--color-primary);
  color: #fff; /*the text color!*/
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem; /*0.5rem for vertical padding and 1.5rem for horizontal padding!*/
}

/* for wider screens, we make the font sizes a little bit smaller! */
@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */
/* Lists => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
.list {
  list-style: none; /*to get ride of default bullet points*/
  color: var(--color-headings);
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is list from MODIFIER which is inline! */

/* MY SOLUTION => USING FLEX TO PUT THE LI ITEMS IN A ROW(HORIZONTALY) */
.list--inline {
  /* display: flex; */
  /* gap: 2rem; */
}

/* OR THE FOLLOWING => MOSH SOLUTION: */
/* .list--inline .list__item { */
/* WE NEED NESTED SELECTORS HERE, BECAUSE WE WANT TO APPLY THE FEATURES ONLY TO list__item AND NOT ALL LIST ITEMS! */
.list--tick .list__item {
  /* display: inline; if we use this, we can not specify the margin to that!*/
  /* display: inline-block; */
  /* display: block; */
  /* margin-right: 2rem; */
  /* padding-left: 2rem; */
  /* padding-left: 5rem; */
  padding-left: 0.5rem; /*internal distance between the tick and the items using padding*/
  margin-bottom: 1rem; /*horizontal distance between every item!*/
}

.list--tick {
  /* background: url(/images/tick.svg); this sets only the background image of an element.The image will be displayed behind the content of the element but it doesn't set the image to be used as the bullet point for list items(<li> items)*/

  /* list-style-image: url(/images/tick.svg); MOSH SOLUTION => THIS COMMAND AND BELOW ONE HAVE THE SAME RESULT!*/
  /* list-style: circle; */
  /* list-style: disc; */

  /* NOT ONLY, WE CAN SPECIFY CIRCLE OR DISC TO THE LIST-STYLE, RATHER, WE CAN SPECIFY AN IMAGE TO THE LIST-STYLE AS FOLLOWING: */
  list-style: url(/images/tick.svg); /* MY SOLUTION => this sets the image to be used as the bullet point for list items(<li> items)*/

  margin-left: 3rem; /*to bring ticks on the screen, we have to give it a padding-left!*/
}

/* for wider screens */
@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0; /* a smaller internal distance between the tick and the items using padding*/
  }
}

/* Icons */
/* Icons => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.icon {
  width: 4rem;
  height: 4rem;
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is icon from MODIFIER which is primary! */
.icon--primary {
  /* fill applies only to SVG images! */
  fill: var(--color-primary);
}

/* MY SOLUTION => to make a circle around the icon--primary - i used the below class(circle-around-icon) to do that!*/
/* .circle-around-icon {
  width: 6.4rem;
  height: 6.4rem;
  background: #f3f9fa;
  padding: 0.8rem;
  border-radius: 50%;
} */

/* MOSH SOLUTION => to make a circle around the icon--primary - mosh uses span element with icon-container class around the svg component as following:*/
.icon-container {
  background: #f3f9fa;
  width: 6.4rem;
  height: 6.4rem;
  border-radius: 50%;
  /* span is an inline element and width and height have no effect on the inline element => that's why i have to chnage it to the inline-block and not block because maybe in the feature i want to put it beside another element and i don't want the line-break with this element. */

  /* display: inline-block; with this, the icon is not exactly in the middle of its surrounding circle, that's why i choose the display:flex*/
  /* IT WOULD BE BETTER TO CHOOSE THE inline-flex INSTEAD OF THE FLEX, BECAUSE flex IS A BLOCK ELEMENT AND WE WILL HAVE A LINE-BREAK WHEN WE HAVE ANOTHER ELEMENT BESIDE IT. THAT'S WHY IT WOULD BE BETTER TO CHOOSE inline-flex INSTEAD OF ONLY flex! */
  /* display: flex; */
  display: inline-flex;
  align-items: center; /* align vertically */
  justify-content: center; /* align horizontally*/
}

/* BUTTONS */
/* BUTTONS => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.btn {
  /* background-color: rgb(128, 200, 224); */
  /* color: white; */
  /* letter-spacing: 0.25px; */
  /* width: 15rem; */
  border-radius: 4rem;
  border: none; /*OR border:0*/
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0; /*margin only in vertical direction!*/
  padding: 2rem 3rem;
  text-align: center;
  text-transform: uppercase;
  white-space: nowrap; /*when there is not enough space, i don't want to go to the next line!*/
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is icon from MODIFIER which is primary! */
.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--block {
  width: 100%;
  display: inline-block;
  /* ancher elements are inline element by default, therefore, width:100% will not work and we have to change the display to the inline-block. */
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

/* for wider screens */
@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* INPUTS */
/* INPUTS => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.input {
  /* border-radius: 30px; */
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  color: var(--color-headings);
  font-size: 2rem;
  outline: none; /* Oder outline:0 */
  padding: 1.5rem 3.5rem;
}

/* using pseudo element to change the color of placeholder! */
.input::placeholder {
  color: #cdcbd7;
}

.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);

  /* display: inline-flex; => the text and the SEARCH button have to be apart from each other in right and left side, that's why inline doesn't work here because it brings these two parts together!*/
  display: flex;
  /* justify-content: space-between;  */
  /* MY SOLUTION => to put the text in left hand and the SEARCH button in right hand!*/
  /* MY SOLUTION doesn't work when i type something in input field, it types only the size of placeholder and doesn't go further, that's why i have to use the MOSH SOLUTION which is flex-grow:1, in this case, the input will grow to takes all the input field from left to right side of the page! */
}

.input-group .btn {
  margin: 0.5rem;
}

.input-group .input {
  border: 0;

  flex-grow: 1;
  /* MOSH SOLUTION => to grow up the flex container and take all the available space!*/

  padding: 1.5rem 1rem;
  /*The important point here is that, we want to reduce the vertical space between wordpress icon and the text but only and only when the input is in the input-group and not our original input, that's why i change the vertical padding here and not in the original(basic) input above!*/
}

/* Input for wider screen */
@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/* CARDS */
/* CARDS => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.card {
  border-radius: 0.7rem;
  /* horizontal and vertical offsets, bluring the shadow and making it softer, spreading the shadow, the larger this value, the bigger the shadow is gonna be! */
  box-shadow: 0 0 20px 10px #f3f3f3;
  /* display: flex;
  flex-grow: 1; */

  /* WE HAVE TO SET THE overflow:hidden HERE IN PARENT AND NOT IN THE CHILD(HEADER with calss of .card__header) */
  overflow: hidden; /*we have border-radius:0.7rem for entire card, but when we add background color to the header of the card, it will grow and goes beyond its parent which is card => in this case, overflow happens which is visible as default and it means we can see the overflow => two edges with blue color header and with overflow:hidden, we can hide these two edges with blue color header and see again the round two edges at top of the card of course with blue color:)*/
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is card from MODIFIER which is primary! */
/* WE HAVE TWO REUSABLE CARD COMPONENTS: TO TEST THEM, IT IS JUST ENOUGH TO CHANGE THE NAME(primary, secondary) OF THE CARD IN INDEX.HTML FILE.*/
.card--primary .card__header {
  background: var(--color-primary);
  color: #fff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}

/* PLANS */
.plan__name {
  color: #fff;
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300; /*to make the font thinner*/
  opacity: 0.8;
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300; /*to make the font thinner!*/
  letter-spacing: 0.1rem;
  display: block;
  /*description is a span element and span is an inline element and for wider screen, it stays beside the billing-cycle component and doesn't go to the next line - we need a line-break here and therefore we have to change the display from inline to block!*/
}

.plan .list__item {
  margin-bottom: 2rem; /*horizontal distance between every item!*/
}

/* for wider screens */
@media screen and (min-width: 1024px) {
  /* We make font-size for all the below classes for wider screens smaller! */
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }

  .plan__description {
    font-size: 1.7rem;
  }
}
