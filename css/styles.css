/* Universal RESET */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* defining global variables to use them anywhere in our program - using root Pseudo class selector which matches the html element!*/
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --color-border: #ccc;
  --border-radius: 3rem;
}

/* Typography */
html {
  /* font-size: 16px; */
  /*by default is 16px => this is set by the browser*/

  /* 62.5% of 16px is 10px */
  font-size: 62.5%; /*one rem is 10px!*/
}

/* after adding the google font to our html: I put the font-family here and all the elements will automatically inherited from that!*/
body {
  /* all are sans-serif fonts */
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5; /*1.5 times the current size*/
  color: var(--color-body);
  /* padding: 4rem; */
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
  line-height: 1.1;
}

h1 {
  /*1 x font-size of html element*/
  font-size: 7rem; /*10px*/
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

/* p {
  margin-top: 0;
} */

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/* Links */
a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 0.5rem;

  /* we have to put the transition here => the parent of .link-arrow:hover::after */
  transition: transform 0.5s;

  /* We have to put the relative position here as parent! */
  position: relative;
}

/* .link-arrow:hover { */
.link-arrow:hover::after {
  /* My Solution using the transform and absolute and relative positions! */
  transform: translateX(1rem);

  /* to use the transform, we have to use the child here as absolute position and the parent as relative position above! */
  position: absolute;
  top: 0.43rem;
  /* bottom: 0; */
  /* left: 0; */

  /* Mosh Solution => very simple*/
  /* margin-left: 1rem; */
}

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
.badge {
  /* border-radius: 20px; */
  /* it doesn't wrap itself to the second line - whatever we put in this line,it will not wrap and would be always in one line!*/
  border-radius: 2rem;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem; /*0.5rem for vertical padding and 2rem for horizontal padding!*/
  white-space: nowrap;
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is badge from MODIFIER which is primary! */
.badge--primary {
  background: var(--color-primary);
  color: #fff; /*the text color!*/
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem; /*0.5rem for vertical padding and 1.5rem for horizontal padding!*/
}

/* for wider screens, we make the font sizes a little bit smaller! */
@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */
/* Lists => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
.list {
  list-style: none; /*to get ride of default bullet points*/
  color: var(--color-headings);
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is list from MODIFIER which is inline! */

/* MY SOLUTION => USING FLEX TO PUT THE LI ITEMS IN A ROW(HORIZONTALY) */
.list--inline {
  /* display: flex; */
  /* gap: 2rem; */
}

/* OR THE FOLLOWING => MOSH SOLUTION: */
/* .list--inline .list__item { */
/* WE NEED NESTED SELECTORS HERE, BECAUSE WE WANT TO APPLY THE FEATURES ONLY TO list__item AND NOT ALL LIST ITEMS! */
.list--tick .list__item {
  /* display: inline; if we use this, we can not specify the margin to that!*/
  /* display: inline-block; */
  /* display: block; */
  /* margin-right: 2rem; */
  /* padding-left: 2rem; */
  /* padding-left: 5rem; */
  padding-left: 0.5rem; /*internal distance between the tick and the items using padding*/
  margin-bottom: 1rem; /*horizontal distance between every item!*/
}

.list--tick {
  /* background: url(/images/tick.svg); this sets only the background image of an element.The image will be displayed behind the content of the element but it doesn't set the image to be used as the bullet point for list items(<li> items)*/

  /* list-style-image: url(/images/tick.svg); MOSH SOLUTION => THIS COMMAND AND BELOW ONE HAVE THE SAME RESULT!*/
  /* list-style: circle; */
  /* list-style: disc; */

  /* NOT ONLY, WE CAN SPECIFY CIRCLE OR DISC TO THE LIST-STYLE, RATHER, WE CAN SPECIFY AN IMAGE TO THE LIST-STYLE AS FOLLOWING: */
  list-style: url(/images/tick.svg); /* MY SOLUTION => this sets the image to be used as the bullet point for list items(<li> items)*/

  margin-left: 3rem; /*to bring ticks on the screen, we have to give it a padding-left!*/
}

/* for wider screens */
@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0; /* a smaller internal distance between the tick and the items using padding*/
  }
}

/* Icons */
/* Icons => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.icon {
  width: 4rem;
  height: 4rem;
}

.icon--small {
  width: 3rem;
  height: 3rem;
}

.icon--very--small {
  width: 2rem;
  height: 2rem;
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is icon from MODIFIER which is primary! */
.icon--primary {
  /* fill applies only to SVG images! */
  fill: var(--color-primary);
}

.icon--white {
  fill: #fff;
}

/* MY SOLUTION => to make a circle around the icon--primary - i used the below class(circle-around-icon) to do that!*/
/* .circle-around-icon {
  width: 6.4rem;
  height: 6.4rem;
  background: #f3f9fa;
  padding: 0.8rem;
  border-radius: 50%;
} */

/* MOSH SOLUTION => to make a circle around the icon--primary - mosh uses span element with icon-container class around the svg component as following:*/
.icon-container {
  background: #f3f9fa;
  width: 6.4rem;
  height: 6.4rem;
  /* width: 3.4rem;
  height: 3.4rem; */
  border-radius: 50%;
  /* span is an inline element and width and height have no effect on the inline element => that's why i have to chnage it to the inline-block and not block because maybe in the feature i want to put it beside another element and i don't want the line-break with this element. */

  /* display: inline-block; with this, the icon is not exactly in the middle of its surrounding circle, that's why i choose the display:flex*/
  /* IT WOULD BE BETTER TO CHOOSE THE inline-flex INSTEAD OF THE FLEX, BECAUSE flex IS A BLOCK ELEMENT AND WE WILL HAVE A LINE-BREAK WHEN WE HAVE ANOTHER ELEMENT BESIDE IT. THAT'S WHY IT WOULD BE BETTER TO CHOOSE inline-flex INSTEAD OF ONLY flex! */
  /* display: flex; */
  display: inline-flex;
  align-items: center; /* align vertically */
  justify-content: center; /* align horizontally*/
}

/* using this class to make the color of the icon red! */
.icon-container--accent {
  background: var(--color-accent);
}

/* BUTTONS */
/* BUTTONS => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.btn {
  /* background-color: rgb(128, 200, 224); */
  /* color: white; */
  /* letter-spacing: 0.25px; */
  /* width: 15rem; */
  border-radius: 4rem;
  border: none; /*OR border:0*/
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0; /*margin only in vertical direction!*/
  padding: 2rem 3rem;
  text-align: center;
  text-transform: uppercase;
  white-space: nowrap; /*when there is not enough space, i don't want to go to the next line!*/
}

/* Domain Block */
/* when we have an icon and this icon is available when we have a button!  */
.btn .icon {
  width: 2rem;
  height: 2rem;
  /* margin-right: 1rem; => MOSH SOLUTION => I don't need this, because i use flex(gap) in Domain Block section!*/
  /* vertical-align: middle; MOSH SOLUTION TO ALIGN THE MAGNIFIER AND SEARCH WORD VERTICALLY IN THE MIDDLE - MY SOLUTION IS IN Domain Block SECTION - I USED THE display:flex*/

  /* align-self: center; MY SOLUTION => AS AN ALTERNATIVE => BUT THE align-items: center; IN btn--search HAS TO BE COMMENTED OUT!*/
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is icon from MODIFIER which is primary! */
.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--block {
  width: 100%;
  display: inline-block;
  /* ancher elements are inline element by default, therefore, width:100% will not work and we have to change the display to the inline-block. */
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--stretched {
  padding-left: 6rem;
  padding-right: 6rem;
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

/* for wider screens */
@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* INPUTS */
/* INPUTS => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.input {
  /* border-radius: 30px; */
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  color: var(--color-headings);
  font-size: 2rem;
  outline: none; /* Oder outline:0 */
  padding: 1.5rem 3.5rem;
}

/* using pseudo element to change the color of placeholder! */
.input::placeholder {
  color: #cdcbd7;
}

.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);

  /* display: inline-flex; => the text and the SEARCH button have to be apart from each other in right and left side, that's why inline doesn't work here because it brings these two parts together!*/
  display: flex;
  /* justify-content: space-between;  */
  /* MY SOLUTION => to put the text in left hand and the SEARCH button in right hand!*/
  /* MY SOLUTION doesn't work when i type something in input field, it types only the size of placeholder and doesn't go further, that's why i have to use the MOSH SOLUTION which is flex-grow:1, in this case, the input will grow to takes all the input field from left to right side of the page! */
}

.input-group .btn {
  margin: 0.5rem;
}

.input-group .input {
  border: 0;

  flex-grow: 1;
  /* MOSH SOLUTION => to grow up the flex container and take all the available space!*/

  padding: 1.5rem 2rem;
  /*The important point here is that, we want to reduce the vertical space between wordpress icon and the text but only and only when the input is in the input-group and not our original input, that's why i change the vertical padding here and not in the original(basic) input above!*/
}

/* Input for wider screen */
@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/* CARDS */
/* CARDS => using Object Oriented CSS principle => we have to separate the structure from skin*/
/* Our basic structure => in one class */
/* THIS IS THE BEAUTY OF OOCSS TO HAVE ONE SEPARATED STRUCTURE FROM DIFFERENT SKINS AND WITH OMITTING; ADDING OR COMBINING THE SKINS; WE CAN ACHIEVE DIFFERENT RESULTS!*/
.card {
  border-radius: 0.7rem;
  /* horizontal and vertical offsets, bluring the shadow and making it softer, spreading the shadow, the larger this value, the bigger the shadow is gonna be! */
  box-shadow: 0 0 20px 10px #f3f3f3;
  /* display: flex;
  flex-grow: 1; */

  /* WE HAVE TO SET THE overflow:hidden HERE IN PARENT AND NOT IN THE CHILD(HEADER with calss of .card__header) */
  overflow: hidden; /*we have border-radius:0.7rem for entire card, but when we add background color to the header of the card, it will grow and goes beyond its parent which is card => in this case, overflow happens which is visible as default and it means we can see the overflow => two edges with blue color header and with overflow:hidden, we can hide these two edges with blue color header and see again the round two edges at top of the card of course with blue color:)*/
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

/* applying our skins using BEM naming convention(Block Element Modifier) with double hyphen(--) in a few other classes below:*/
/* Example for BEM => using two hyphens(--), we separate the BLOCK which is card from MODIFIER which is primary! */
/* WE HAVE TWO REUSABLE CARD COMPONENTS: TO TEST THEM, IT IS JUST ENOUGH TO CHANGE THE NAME(primary, secondary) OF THE CARD IN INDEX.HTML FILE.*/
.card--primary .card__header {
  background: var(--color-primary);
  color: #fff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

/* change the color of the badge in primary card to see that in primary color!  */
.card--primary .badge--primary {
  background: #126de4;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}

/* PLANS */
.plan__name {
  color: #fff;
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300; /*to make the font thinner*/
  opacity: 0.8;
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300; /*to make the font thinner!*/
  letter-spacing: 0.1rem;
  display: block;
  /*description is a span element and span is an inline element and for wider screen, it stays beside the billing-cycle component and doesn't go to the next line - we need a line-break here and therefore we have to change the display from inline to block!*/
}

/* .plan__imageSVG {
  width: 7rem;
  height: 7rem;
} */

.plan .list__item {
  margin-bottom: 2rem; /*horizontal distance between every item!*/
}

/* MY FIRST SOLUTION => creating popular Badge on top right of the Card using Pseudo element => after */
/* .card::after {
  content: "Popular";
  width: 10rem;
  background: blue;
  color: #fff;
  font-size: 2rem;
  font-weight: bold;
  padding: 0 1rem;
  top: 3rem;
  right: 0;

  transform: rotate(90deg);
  position: absolute;
} */

/* .plan--popular {
  transform: scale(1.1);
} */

/* MY SECOND SOLUTION plus MOSH SOLUTION=> creating popular Badge on top right of the Card using Pseudo element => before */

/* when we have the popular badge in our plan, then the .card__header would be positioned as relative, otherwise not!  */
.plan--popular .card__header {
  position: relative;
}

.plan--popular .card--primary .card__header::before {
  content: url(/images/popular.svg);
  width: 3.5rem;
  /* height: 4rem; */
  display: inline-block; /*This is an inline element, we have to change it to the inline-block, otherwise, width will not work!*/

  position: absolute; /*the parent is .card__header, that's why i placed the position:relative there, although when i place it in .card as parent, the result would be the same!(.card is the parent of the parent:))*/
  /* top: 0; */
  top: -6px;
  right: 5%;
  /* WE NEED PERCENTAGE HERE, BECAUSE FOR DIFFERENT DEVICES, HEADER HAS DIFFERENT WIDTH AND WHATEVER WIDTH WOULD BE, WE NEED 5% OF THIS WIDTH AS RIGHT OFFSET! BUT FOR 2REM, WE WILL HAVE ALWAYS 2REM OF THE WIDTH INSPITE OF CHANGING THE WIDTH FOR DIFFERENT DEVICES! */
  /*whatever is the width of the card, the 5% from right side of the card would be right offset! */
  /* right: 2rem; */
  /* left: 33rem; */
}

/* for wider screens for plan*/
@media screen and (min-width: 1024px) {
  /* We make font-size for all the below classes for wider screens smaller! */
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }

  .plan__description {
    font-size: 1.7rem;
  }
}

/* MEDAI OBJECTS */
.media {
  display: flex;
  column-gap: 2rem;
  /* margin-bottom: 4rem; */
}

/* I made margin:0 in Universal RESET, so, i don't need to repeat it again here(This is mosh solution!)*/
/* .media__title {
  margin-top: 0;
}

I set the column-gap above for 2rem and i don't need to use the below margin for 2rem anymore(mosh solution!)
.media__body {
  margin: 0 2rem;
} */

.media__image {
  margin-top: 1rem;
}

/* Quotes */
.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

.quote__text {
  margin-bottom: 1rem;
}

.quote--primary .quote__text::before {
  /* content: "“"; */
  content: open-quote; /*this is the predefined value in html*/
}

.quote--primary .quote__text::after {
  /* content: "”"; */
  content: close-quote;
}

.media .media__body {
  /* margin-top: 1.5rem; */
}

/* .media .media__body .media__title{ */
.quote__author {
  /* font-size: 3rem; */
  font-size: 2rem;
  /* font-weight: 500; */
  font-weight: 600;
  font-style: normal;
  margin-bottom: 0;
}

/* .media .media__body .quote__organization { */
.quote__organization {
  color: var(--color-headings);
  opacity: 0.4;
  /* font-size: 2rem; */
  font-size: 1.5rem;
  font-style: normal;
}

.quote__line {
  position: relative; /*to adjusting(bring) the blue quote line to the midle of name of author(John Smith), we set the position of this line relative and move it from bottom 10px to the top! (Y direction in CSS is against the Y direction in the Mathe => TOP is negative and BOTTOM is positive!)*/
  bottom: 1.5rem;
  /* bottom: 1rem; */
}

/*for wider screens for Quotes*/
@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2.4rem;
  }

  .quote__organization {
    font-size: 1.6rem;
  }
}

/* GRIDS */
.grid {
  display: grid;
}

/* screen wider than Tablet! */
@media screen and (min-width: 768px) {
  .grid--1x2 {
    /* We take all available space, then divided by two and finally we give to everyone a slice! */
    grid-template-columns: 1fr 1fr;
  }
}

/* adding three column but when our screen is wider than laptop and big screens */
@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* TESTIMONIALS */
.testimonial {
  padding: 4rem; /*to have some space inside the testimonial frame*/
  margin: 3rem; /*to have some space between body and testimonial frame*/
}

.testimonial .testimonial__image {
  width: 100%; /*with this, we have a responsive image, when we chnage the size of the page, the size of the image change accordingly
  and with grid--1x2, we have always two equal elements as slice => a div and an image!*/
}

.container--testimonial .icon-container {
  /* top: 3rem; the space from top of the image to the down for 30px */
  top: 2rem; /*the space from top of the image to the down for 30px*/

  /* right: -5%; This doesn't help because when we chnage the size ofthe page, the position of the page changes accordingly and that's what we don't want! We want that the icon has a fixed position on the image, that's why pixel is best solution instead of the %*/
  right: -3.2rem; /*-32px => it is half of the 64px which is width of the icon and guaratnie that the half of the icon stay on the right side of the image and other half on the left side*/
  position: absolute;
}

.container--testimonial {
  position: relative;
}

/* for screen wider than 768px for TESTIMONIALS */
@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }

  .testimonial .quote {
    /* margin-left: 3rem; */
    margin-left: 5rem;
  }
}

/* CALLOUTS */
.callout {
  padding: 4rem;
  border-radius: 5px;
}

.callout--primary {
  background: var(--color-primary);
  color: #fff;
}

.callout__heading {
  color: #fff;
  /* margin-top: 0; */
  font-size: 3rem;
}

/* THIS GRID IS ONLY FOR LEARNING AND DOES NOTHING! */
.grid123 {
  display: grid;
  justify-items: stretch; /*to align horizontally*/
  align-items: stretch; /*to align vertically*/
  /* Stretch is efault value, that's why we see that the button is vertically and horizontally stretched! */
}
/* WHAT IS THE SOLUTION TO PREVENT THE BUTTON FROM STRETCHING IN A GRID: */
.callout .btn {
  /* justify-items and align-items are used to align grid but WHEN WE WANT TO ALIGN AN ITEM IN THIS GRID, WE HAVE TO USE self INSTEAD OF items. HERE OUR GRID ITEM IS BUTTON!*/
  justify-self: center; /*align an item in a grid horizontally*/
  align-self: center; /*align an item in a grid vertically*/
}

.callout__content {
  text-align: center;
}

/* for screens wider that 768px */
@media screen and (min-width: 768px) {
  .callout__content {
    text-align: left;
  }

  .callout .btn {
    justify-self: start; /*move the button from center and bring it close to the text*/
    /* justify-self: left; THIS HAS THE SAME RESULT LIKE start*/
    /* margin: 0 2rem; MOSH SOLUTION => to make a 2rem space between the button and the text*/
  }

  .callout .grid--1x2 {
    column-gap: 2rem; /* MY SOLUTION => to make a 2rem space between the button and the text*/
  }

  .callout .grid--1x2 {
    /* previously there were two columns with equal width => 1fr 1fr */
    grid-template-columns: 1fr auto;
    /* BUT NOW, THE BUTTON TAKES THE SPACE WHAT IT NEEDS WITH auto AND ALL THE EXTRA SPACE WHICH LEFTS WILL ALLOCATE TO THE TEXT  */
    /* IMPORTANT NOTE:
    WHEN WE WANT THAT AN ITEM TAKES THE SPACE WHAT IT NEEDS AND FITS IN ITS WIDTH AND NOT MORE, WE USE auto KEYWORD.
    THE LEFT AVAILABLE EXTRA SPACE WILL ALLOCATE TO OTHER ITEMS WITH fr KEYWORD!
    */
  }
}

/* Collapsibles */
.collapsible__header {
  display: flex;
  justify-content: space-between; /*push the items at the edges and add the space in between them!*/
}

.collapsible__heading {
  /* margin-top: 0;  */
  font-size: 3rem;
}

.collapsible__chevron {
  background: none; /*to remove the above #f3f9fa background color around the icon, because we don't want that here! */

  transform: rotate(-90deg); /*turn it 90 deg counter clockwise!*/
  transition: transform 0.3s; /*animate the rotate property, make it a little bit smooth!*/
}

.collapsible__content {
  /* visibility: hidden; */
  /* transition: display 0.3s; transition for display will not work => we have to do a trick! we comment the display:none out and use max-height:0*/
  /* display: none; */
  /* changing from display to the max-height to be able to use the transition for max-height: */
  max-height: 0; /*with this, we will have overflow and we see still the text anyway! TO HIDE THE TEXT, WE HAVE TO USE overflow:hidden;*/
  overflow: hidden;

  opacity: 0;
  /* transition: max-height 0.3s; we can now apply the transition to the max-height */
  transition: max-height 0.3s, opacity 0.3s; /*OR USING all KEYWORD as following => both have the same result!*/
  /* transition: all 0.3s; */
}

.collapsible--expanded .collapsible__content {
  /* display: block; */
  /* visibility: visible; */
  /* display: contents; Instead of this, we use max-height:100vh*/
  /* changing from display to the max-height to be able to use the transition for max-height: */
  max-height: 100vh; /*using max-height instead of height, the content takes height it needs and not more than that, but only with height and not max-height, it takes the entire height of view port but we don't want that!*/
  opacity: 1;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
}

/* Blocks */
.block {
  /* defining a local variable here instead of defining this variable in :root as global variable: */
  --padding-vertical: 6rem; /* and now this variable is available to this block element and its all children */
  /* padding: 6rem 2rem; */
  padding: var(--padding-vertical) 2rem;
  /* border: 2px solid red; */
}

.block__header {
  text-align: center; /*to align text and header in center!*/
}

.block__heading {
  margin-top: 0;
}

.block--dark {
  background-color: #000;
  color: #7b858b;
}

/* .block--dark .block__heading { */
.block--dark h1,
.block--dark h2,
.block--dark h3 {
  color: #fff; /*only the heading in block--dark section becomes white color and not others!*/
}

.block--skewed-right {
  /* go to this website: https://bennettfeely.com/clippy/ => select Custom Polygon and then we can create our cuson polygon: */
  /* Top-left corner, Top-right corner, Buttom right corner, last selected point => each group seperated with a comma has a X-offset and Y-offset! */
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 90%);
  /* padding-bottom: 10rem; */
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.block--skewed-left {
  /* go to this website: https://bennettfeely.com/clippy/ => select Custom Polygon and then we can create our cuson polygon: */
  /* Top-left corner, Top-right corner, Buttom right corner, last selected point => each group seperated with a comma has a X-offset and Y-offset! */
  clip-path: polygon(0% 0%, 100% 0%, 100% 90%, 0% 100%);
  /* padding-bottom: 10rem; */
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.container {
  max-width: 1140px;
  margin: 0 auto; /*for wider screens, the right side of the white block will be too much free space and we don't want that => that's why we bring the block in the middle!  */
  /* 0: we have 0px vertically margin and auto: when we have extra space at the right side of the block, it will be divided automatically on the both sides of the block and will not stay only at right side of the block => it means the block always remain in the middle of the page(centered on the page!) */
}

/* Navigation Bars */
.nav {
  background: #000;
  /* MOSH SOLUTION => TO KEEP THE ICON AND TOGGLER IN THE FIRST LINE AND PUSH THE LIST OF ITEMS IN THE SECOND LINE USING FIRSTLY => FLEX AND THEN FLEX-WRAP */
  /* display: flex;
  justify-content: space-between; */
  /*the first and the last item pushed to the sides and the remaining space will be distributed between other items!*/
  /* flex-wrap: wrap; */
  padding: 0 1rem;
  /*overall padding horizontally and vertically around the entire nav*/
}

.nav__content {
  /* MY SOLUTION => TO KEEP THE ICON AND TOGGLER IN THE FIRST LINE AND PUSH THE LIST OF ITEMS IN THE SECOND LINE! */
  display: flex;
  justify-content: space-between;
}

.nav .nav__toggler {
  opacity: 0.5; /*semi transparent and grey*/
  align-self: center; /*to center the toggler icon in the middle of narrow nav*/
  transition: box-shadow 0.15s; /*a soft shadow for 0.15s*/
  cursor: pointer;
}

/* .nav .nav__toggler:hover { */
/* we use double class selector => it means we write two classes side by side without any space between them => .nav.collapsible--expanded => IT GIVES US 100% GUARANTIE THAT THIS ITEMS ONLY FOR NAVBAR WIL BE EXPANDED AND NOT IN OTHER PART OF THE PROGRAM => THIS IS LIKE LOGIC AND => WE SELECT AN ELEMENT WHICH HAS BOTH CLASSES!*/
.nav.collapsible--expanded .nav__toggler {
  opacity: 1; /*complete transparent and white*/
  /* horizontal and vertical offsets, bluring and making the shadow softer, spread the shadow with 3px and the color is #666  */
  box-shadow: 0 0 0 3px #666;
  border-radius: 5px;
}

.nav__list {
  /* MOSH SOLUTION => TO KEEP THE ICON AND TOGGLER IN THE FIRST LINE AND PUSH THE LIST OF ITEMS IN THE SECOND LINE USING THIRDLY => WIDTH:100% */
  /* width: 100%; */
  /* padding: 2rem; */
}

.nav__item {
  /* margin-bottom: 1rem; */
  padding: 0.5rem 2rem;
  border-bottom: 1px solid #222;
}

/* change the color of direct child of the li which is ancher => a */
.nav__item > a {
  /* margin-bottom: 1rem; */
  color: #d2d0db;
  transition: color 0.3s; /*change the color when i hover on any link would be smoother!*/
}

/* a {
  color: #d2d0db;
} */

.nav__item > a:hover {
  color: #fff;
}

.nav__brand {
  transform: translateY(5px);
  /*bring five pixels the icon => moshify icon down!*/
}

/* targetting Tablet and wider screens */
@media screen and (min-width: 768px) {
  /* ALL THE BELOW STATEMENTS ARE ***MY SOLUTION*** */
  .nav__toggler {
    display: none;
  }

  .nav__brand {
    transform: translateY(22px);
    /*bring 22px the icon => moshify iocn down!*/
  }

  /* .nav__content {
    padding: 0;
    margin: 0;
  } */

  .nav__list {
    /* --width-auto: auto; */
    /* width: var(--width-auto); */
    width: auto;
    display: flex;
    font-size: 1.6rem;
    max-height: 100%;
    opacity: 1;
    justify-content: flex-end; /*to put these four words(Hosting VPS Domain Pricing ) at the right hand of the nav Bar at the end!*/
    transform: translateY(-30px);
    /*to align the list(four words in a row) at right hand with mosh icon at left hand*/
  }

  .nav__item {
    border: 0;
  }
}

/* Hero => we don't need this here anymore, because we applied 90% in original clip-path*/
/* .hero {
  clip-path: polygon(0% 0%, 100% 0%, 100% 90%, 0% 100%);
} */

.hero__tagline {
  font-size: 2rem;
  color: #b9c3cf;
  letter-spacing: 0.1rem;
  padding: 2rem 0 5rem 0;
}

.hero__image {
  width: 100%; /*with this, we have a responsive image that strechtes to fill its container! */
  /* width: 100vw; This doesn't work well like with:100%*/
}

/* THIS IS ALREADY THERE ON THE LINE 802 ABOVE - WE DON'T NEED TO REAPEAT IT HERE AGAIN! */
/* .block__header {
  text-align: center; 
  } */

/* for Tablets and wider screens */
@media screen and (min-width: 768px) {
  /* removing the extra space of top of the grid  */
  .hero {
    padding-top: 0;
  }

  .hero__content {
    text-align: left;
    align-self: center;
    /* to bring this content in the midlle of the grid - the image is already in the middle of the left grid at the left side => therefore, both of them would be in the middle of the hero section! */
  }
}

/* Domain Block */
/* MY SOLUTION => USING FLEX - MOSH SOLUTION IS IN btn SECTION AND COMMENTED OUT ALREADY! */
.btn--search {
  display: flex;
  align-items: center; /*to align the SEARCH word and search icon(magnifier) in center vertically */
  /* justify-content: center; */
  column-gap: 1rem; /*gap between the SEARCH word and search icon(magnifier)*/
}

.block-domain .input-group {
  box-shadow: 0 0 30px 20px #e6ebee;
  border: none;
  /* margin: 4rem 0; */
  /*vertical space for 4rem between input-group and the paragraph and below the input-group */
  margin: 4rem auto;
  /* the input-group is in the middle now using auto */
  max-width: 670px;
  /* we made the max-width of the input-group 30 pixel smaller than the 6 items's width which is 700px */
}

.block-domain__prices {
  display: grid;
  /* In mobile view, we have three columns and two rows: */
  grid-template-columns: 1fr 1fr 1fr;
  /* grid-template-rows: 1fr 1fr; */
  grid-template-rows: repeat(2, 6rem);
  justify-items: center; /*horizontally alignment the grid items in the center!*/

  font-size: 2rem;
  font-weight: 600;
  max-width: 700px; /*it was calculated in Photoshop from beginning to the end of the domain with prices (6 items) => this list will not grow more than 700px, it doesn't matter, when we add or remove one item form this list, it will stay always with maximum width of 700px */

  /* BUT WITH MAX-WIDTH:700px, HOW CAN WE PUT THE 6 ITEMS IN THE MIDDLE USING auto: */
  margin: 0 auto;
}

@media screen and (min-width: 768px) {
  .block-domain__prices {
    /* MY SOLUTION USING FLEX WHICH IS SIMPLEST:*/
    /* display: flex;
    justify-content: space-around; */

    /* MOSH SOLUTION USING GRID AGAIN: */
    /* grid-template-columns: repeat(6, 1fr); */
    /* but the problem with this method is that: when tomorrow i removed an item or added an item, I have to rememeber where i have to go and change the number 6 manually to a new number which is difficult! */

    /* SO, HOW CAN WE CHANGE IT TO AN AUTOMATIC METHOD: */
    /* grid-template-columns: repeat(auto-fit, 1fr); */
    /* with auto-fit, the grid will try to create as many columns as needed to fit all the items in this grid automatically but it doesn't work fr and we have to chnage it to the pixel: */

    /* grid-template-columns: repeat(auto-fit, 100px); */
    /* Grid will calculate 100px for every grid cell and when i add new item or remove an existing ite, it will recalculate the process again */

    /* BUT THE PROBLEM IS THAT, I DON'T WANT THAT; EVERY CELL HAS FIXED 100px AND I WANT THAT IT WILL BE CALCULATED AUTOMATICALLY ACOSS THE ENTIRE AVAILABLE SPACE: */
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    /* minimum size of the cell would be 100px and maximum size of the cell would be 1fr - Grid will calculate it automatically according to the available space and the number of grid items => if there will be extra space, it will be divided equally between all the grid items!*/

    /* OR with rem instead of pixel: */
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
  }
}

/* Plans Block */
.block--plans .grid--1x3 {
  row-gap: 4rem; /*we make a 4rem row-gap between all three cards in MOBILE version!*/
}

.block--plans .plan {
  max-width: 500px; /*We kepp it simple => till laptop, we have always max-width of 500px - 1024px(laptop) and more than that, we will have enough space for all three card, that's why, they will come all togethre in a row!*/

  /* MOSH SOLUTION TO PUT THE GRIDS VERTICALLY IN THE MIDDLE OF THE PAGE */
  /* margin: 0 auto; */
}

/* MY SOLUTION TO PUT THE GRIDS VERTICALLY IN THE MIDDLE OF THE PAGE */
.block--plans .grid--1x3 {
  justify-content: center;
}

.block--plans .plan__entry .list--tick .list__item:last-child {
  /* display: none; */
  visibility: hidden; /*to keep the height of both Entry and Enterprise cards equal, I keep the space for the last entry in Entry card and make it hidden in visibility and not none in display!*/
}

/* make the scale() smooth instead of sudden movement*/
.block--plans .plan {
  /* transition: all 0.5s; */
  transition: transform 0.2s ease-out;
  /* ease-out: smooth finish - when something is disappearing slowly from the screen => when a car is coming to a stop! */

  /* ease-in: smooth start - when something is appearing slowly on the screen => when a car is leaving a stop! */
}

/* Only for Entry and Enterprise Cards => we make these two cards only 0.05(5%) bigger! */
.block--plans .plan:hover {
  transform: scale(1.05);
}

/* Only for Business Card with Popular.svg => we make it scale(1.15) because it was already scale(1.1) and we make it 0.05 bigger like other two cards! */
.block--plans .plan--popular:hover {
  transform: scale(1.15);
}

.block--plans .grid--1x3 {
  gap: 8rem 4rem;
  /* 8rem => row gap horizontally in mobile version(i mean when our browser is small like a mobile screen, otherwise, hover doesn't work in mobile version!), when we click on each card, it will be bigger and have overlap with neighbour card, this is not good, with 8rem as gap, this problem will be solved! */

  /* 4rem => column gap in desktop version to make the three cards separated vertically */
}

@media screen and (min-width: 1024px) {
  /* .block--plans .grid--1x3 {
    column-gap: 4rem;
  } */

  /* To make the card with popular.svg a little bit(10%) bigger in desktop version: */
  .block--plans .plan--popular {
    transform: scale(1.1);
  }
}

/* Features */
.feature__heading {
  margin: 1rem 0;
}

.feature {
  gap: 4rem 2rem; /*4rem for row in mobile version and 2rem for column in desktop version*/
  /* margin: 12rem 0; to make 12rem space vertically between both top and bottom */
  margin: 6rem 0; /*to make 12rem space vertically between both top and bottom */
}

/* MOSH SOLUTION => to decrease the distance between the grid items and the header: */
/* MY SOLUTION => to change it directly in feature class and not the first grid item!*/
/* .feature:first-of-type {
  margin-top: 6rem;
} */

.feature__image {
  width: 100%;
}

/* for tablet and wider screens */
@media screen and (min-width: 768px) {
  /* MY SOLUTION => TO SWAP THE PHOTO AND TEXT POSITIONS IN SECOND GRID */
  /* .feature--computer .feature__content {
    grid-column: 2/3;
    grid-row: 1/2;
  }

  .feature--computer .feature__picture {
    grid-column: 1/2;
    grid-row: 1/2;
  } */

  /* MOSH SOLUTION => TO SWAP THE PHOTO AND TEXT POSITIONS IN SECOND GRID */
  /* with nth-of-type(even) we can grab the even items like second, fourth, sixth, ... */
  .feature:nth-of-type(even) .feature__content {
    order: 1;
    /* Order:2 => by default the order of our content is 0 and when we change it to any other number than 0, the order will chnage and we will have SWAP. */
  }
}

/* Showcase Block */
/* %%%%%%%%%%%%% MY SOLUTION %%%%%%%%%%%%%%%% */
/* .showcase {
  align-items: center;
  justify-content: center;
} */

/* .block__heading {
  text-align: center;
} */

/* .showcase__firstItem{
  display: flex;
} */

/* .grid--2x2 {
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.showcase .paragraph{
  grid-column: 2/3;
} */
/* %%%%%%%%%%%%% MY SOLUTION %%%%%%%%%%%%%%%% */
.block-showcase__image > img {
  width: 100%; /*to make the image responsive. > means direct child*/
}

.block-showcase .list {
  color: var(--color-body-darker);
}

.block-showcase .list > li {
  margin-bottom: 4rem; /*to make 4 rem space between medias, lis are direct child of ul, that'S why i can use direct child feature here and we don't need to define a new class here!*/
}

.block-showcase h3 {
  font-weight: 500;
}

/* for tablets and wider than that! */
@media screen and (min-width: 768px) {
  .block-showcase .grid--1x2 {
    /* grid-template-columns: 1rem 1rem; here, we don't have the equal columns, every items takes the space which it needs!*/
    /* grid-template-columns: 57rem 57rem; */
    grid-template-columns: 50% 50%; /*we have now two equal columns, regardless if one is small or one is large! => 57rem, 57rem*/
  }

  /* WE HAVE TO APPLY THIS CLASS(block-showcase__image) TO THE PICTURE AND NOT img ANYMORE. BECAUSE AFTER ADDING picture, THE img WOULD NOT BE GRID AND THE picture WOULD BE GRID!  */
  .block-showcase__image {
    justify-self: end; /*to put the image at the end of its cell in such a way that it will not exceed the cell and doesn't go to the neighbourhood cell!*/
  }

  /* > means direct child => we don't need to define a new class here, because there is always a direct img inside a picture, that's why we can always use this direct child! */
  .block-showcase__image > img {
    width: auto; /*for tablets and wider than that we want to display the image in its original(big) size!*/
    max-width: 700px;
    /*the width of the image will not get larger than 700px*/
  }
}
